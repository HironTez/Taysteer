openapi: 3.0.0
info:
  title: Taysteer
  description: The best platform to share your recipes!
  version: 1.0.0

servers:
  - url: /

components:
  schemas:
    UserToResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        login:
          type: string
        image:
          type: string
        rating:
          type: number
    UserToResponseDetailed:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        login:
          type: string
        image:
          type: string
        description:
          type: string
        rating:
          type: number
        ratingsCount:
          type: number
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/RecipeToResponse'
        countOfRecipes:
          type: number
    RecipeToResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        image:
          type: string
        description:
          type: string
        rating:
          type: number
    RecipeToResponseDetailed:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        image:
          type: string
        description:
          type: string
        rating:
          type: number
        ratingsCount:
          type: number
        user:
          type: object
          $ref: '#/components/schemas/UserToResponse'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/RecipeIngredient'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/RecipeStepToResponse'
        countOfComments:
          type: number
    RecipeIngredient:
      type: object
      properties:
        count:
          type: number
        name:
          type: string
        optional:
          type: boolean
    RecipeStep:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    RecipeStepToResponse:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        image:
          type: string
    RecipeCommentToResponse:
      type: object
      properties:
        id:
          type: number
        text:
          type: string
        user:
          type: object
          $ref: '#/components/schemas/UserToResponse'
        date:
          type: string
        updated:
          type: boolean
        countOfChildComments:
          type: number
    RecipeCommentToResponseDetailed:
      type: object
      properties:
        id:
          type: number
        text:
          type: string
        user:
          type: object
          $ref: '#/components/schemas/UserToResponse'
        date:
          type: string
        updated:
          type: boolean
        childComments:
          type: array
          items:
            $ref: '#/components/schemas/ChildComment'
    ChildComment:
      type: object
      properties:
        id:
          type: number
        text:
          type: string
        user:
          type: object
          $ref: '#/components/schemas/UserToResponse'
        date:
          type: string
        updated:
          type: boolean
        mainComment:
          type: object

  responses:
    UnauthorizedError:
      description: Unauthorized

paths:
  /login:
    post:
      tags:
        - Authorization
      summary: Login
      description: Logins the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: Username
                password:
                  type: string
                  description: Password
              required:
                - user
                - login
      responses:
        '200':
          description: Successful login
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /logout:
    post:
      tags:
        - Authorization
      summary: Logout
      description: Logouts the user
      responses:
        '200':
          description: Successful logout
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users:
    post:
      tags:
        - Users
      summary: Create user
      description: Creates the new user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The user's name
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
                description:
                  type: string
                  description: The user's description
                image:
                  type: string
                  format: binary
                  description: The user's image
              required:
                - login
                - password

      responses:
        '201':
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToResponse'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: The user already exist
    put:
      tags:
        - Users
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: string
      summary: Update the user
      description: Updates the user by ID
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The user's name
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
                description:
                  type: string
                  description: The user's description
                image:
                  type: string
                  format: binary
                  description: The user's image
      responses:
        '200':
          description: The user has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToResponse'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: The user already exist
    delete:
      tags:
        - Users
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: string
      summary: Delete user
      description: Deletes user by ID. When somebody
        DELETE User, all Tasks where User is assignee
        should be updated to put userId=null
      responses:
        '204':
          description: The user has been deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
  /users/{user_id}:
    get:
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: detailed
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Users
      summary: Get user by ID
      description: Gets the user by ID / gets my account by "me" instead id
        e.g. “/users/123” or "/users/me" (remove password from response)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UserToResponseDetailed'
                  - $ref: '#/components/schemas/UserToResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
  /users/rating:
    get:
      tags:
        - Users
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
      summary: Get rating of users
      description: Gets rating list of users
      responses:
        '200':
          description: Got rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/{user_id}/rate:
    post:
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: rating
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 5
      summary: Rate the user
      description: Rates the user by ID
      responses:
        '200':
          description: The user has been rated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToResponse'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  /users/delete_image:
    delete:
      tags:
        - Users
      summary: Delete user image
      description: Deletes the user image
      responses:
        '200':
          description: The profile image has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToResponse'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found

  /recipes:
    get:
      tags:
        - Recipes
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
      summary: Get recipes
      description: Gets recipes
      responses:
        '200':
          description: Got recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeToResponse'
    post:
      tags:
        - Recipes
      summary: Create recipe
      description: Creates the new recipe
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The recipe title
                description:
                  type: string
                  description: The recipe description
                image:
                  type: string
                  format: binary
                  description: The recipe image
                ingredients:
                  type: array
                  items:
                    $ref: '#/components/schemas/RecipeIngredient'
                steps:
                  type: array
                  items:
                    $ref: '#/components/schemas/RecipeStep'
                stepImage1:
                  type: string
                  format: binary
                  description: The step 1 image
                stepImage2:
                  type: string
                  format: binary
                  description: The step 2 image
              required:
                - title
                - description
                - image
                - ingredients
                - steps
                - stepImage1
                - stepImage2

      responses:
        '201':
          description: The recipe has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeToResponse'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /recipes/find:
    get:
      parameters:
        - name: search
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
      tags:
        - Recipes
      summary: Find recipes
      description: Find recipes by title
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeToResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /recipes/{recipe_id}:
    get:
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Recipes
      summary: Get recipe by ID
      description: Gets the recipe by ID
        e.g. “/recipes/123”
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RecipeToResponseDetailed'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Recipe not found
    put:
      tags:
        - Recipes
      summary: Update recipe
      description: Updates the recipe
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The recipe title
                description:
                  type: string
                  description: The recipe description
                image:
                  type: string
                  format: binary
                  description: The recipe image
                ingredients:
                  type: array
                  items:
                    $ref: '#/components/schemas/RecipeIngredient'
                steps:
                  type: array
                  items:
                    $ref: '#/components/schemas/RecipeStep'
                stepImage1:
                  type: string
                  format: binary
                  description: The step 1 image
                stepImage2:
                  type: string
                  format: binary
                  description: The step 2 image
              required:
                - title
                - description
                - image
                - ingredients
                - steps
                - stepImage1
                - stepImage2

      responses:
        '200':
          description: The recipe has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeToResponse'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
    delete:
      tags:
        - Recipes
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: string
      summary: Delete recipe
      description: Deletes the recipe by ID.
      responses:
        '204':
          description: The recipe has been deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Recipe not found
  /recipes/{recipe_id}/rate:
    post:
      tags:
        - Recipes
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: string
        - name: rating
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 5
      summary: Rate the recipe
      description: Rates the recipe by ID
      responses:
        '200':
          description: The recipe has been rated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeToResponse'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  /recipes/{recipe_id}/comments:
    post:
      tags:
        - Recipes
      summary: Comment recipe
      description: Creates the comment of the recipe
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                text:
                  type: string
                  description: The comment text
              required:
                - text
      responses:
        201:
          description: The comment has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeCommentToResponse'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    get:
      tags:
        - Recipes
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
      summary: Get comments
      description: Gets comments of the recipe
      responses:
        '200':
          description: Got comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeCommentToResponse'
  /recipes/comments/{comment_id}:
    get:
      tags:
        - Recipes
      summary: Get comment
      description: Gets the comment by id
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: number
        - name: page
          in: query
          required: false
          description: Page of childComments
          schema:
            type: integer
      responses:
        200:
          description: Got the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeCommentToResponseDetailed'
        404:
          description: Not found
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Recipes
      summary: Answer comment
      description: Creates the answer of the recipe comment
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                text:
                  type: string
                  description: The comment text
              required:
                - text
      responses:
        201:
          description: The comment has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeCommentToResponse'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags:
        - Recipes
      summary: Update comment
      description: Updates the comment of the recipe
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                text:
                  type: string
                  description: The comment text
              required:
                - text
      responses:
        201:
          description: The comment has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeCommentToResponse'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Recipes
      summary: Delete comment
      description: Deletes the comment of the recipe
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: number
      responses:
        204:
          description: The comment has been deleted
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
