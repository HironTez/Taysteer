openapi: 3.0.0
info:
  title: Taysteer
  description: The best platform to share your recipes!
  version: 1.0.0

servers:
  - url: /

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        login:
          type: string
        password:
          type: string
        image:
          type: string
        description:
          type: string
        rating:
          type: number
        ratings_count:
          type: number
        ratings_sum:
          type: number
    UserToResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        login:
          type: string
        image:
          type: string
        rating:
          type: number
    UserToResponseDetailed:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        login:
          type: string
        image:
          type: string
        description:
          type: string
        rating:
          type: number
        ratings_count:
          type: number
    # UserToResponseMin:
    #   type: object
    #   properties:
    #     id:
    #       type: string;
    #     login:
    #       type: string;
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /login:
    post:
      tags:
        - Authorization
      security: []
      summary: Login
      description: Logins a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: Username
                password:
                  type: string
                  description: Password
              required:
                - user
                - login
      responses:
        200:
          description: Successful login.
        403:
          description: Incorrect login or password
  /logout:
    post:
      tags:
        - Authorization
      security: []
      summary: Logout
      description: Logouts a user
      responses:
        200:
          description: Successful logout.
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Gets all users (remove password from response)
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserToResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user (remove password from response)
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The user's name
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
                description:
                  type: string
                  description: The user's description
                image:
                  type: string
                  format: binary
                  description: The user's image
              required:
                - login
                - password

      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToResponse'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          description: The user already exist
    put:
      tags:
        - Users
      summary: Update a user
      description: Updates a user by ID
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The user's name
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
                description:
                  type: string
                  description: The user's description
                image:
                  type: string
                  format: binary
                  description: The user's image
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToResponse'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          description: The user already exist
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID. When somebody
        DELETE User, all Tasks where User is assignee
        should be updated to put userId=null
      responses:
        204:
          description: The user has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /users/{userId}:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: detailed
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Users
      summary: Get user by ID
      description: Gets a user by ID / gets my account by "me" instead id
        e.g. “/users/123” or "/users/me" (remove password from response)
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UserToResponseDetailed'
                  - $ref: '#/components/schemas/UserToResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /users/rating:
    get:
      tags:
        - Users
      parameters:
        - name: count
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Got rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}/rate:
    post:
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: rating
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The user has been rated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToResponse'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Not found
  /users/delete_image:
    post:
      tags:
        - Users
      responses:
        200:
          description: The profile image has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToResponse'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Not found
