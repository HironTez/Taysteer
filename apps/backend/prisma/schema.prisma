// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role           @default(USER)
  status        Status         @default(ACTIVE)
  email         String
  password      String
  username      String         @unique
  name          String?
  description   String?
  image         String?
  recipes       Recipe[]
  comments      Comment[]
  recipeRatings RecipeRating[]
}

enum Role {
  ADMIN @map("admin")
  USER  @map("user")

  @@map("_Role")
}

enum Status {
  ACTIVE @map("active")
  BANNED @map("banned")

  @@map("_Status")
}

model Recipe {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  authorId    String             @db.ObjectId
  author      User?              @relation(fields: [authorId], references: [id])
  ingredients RecipeIngredient[]
  steps       RecipeStep[]
  comments    Comment[]
  ratings     RecipeRating[]
}

type RecipeIngredient {
  count    String
  name     String
  optional Boolean @default(false)
}

type RecipeStep {
  title       String
  description String
  image       String
}

model RecipeRating {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  value    Int
  userId   String @db.ObjectId
  user     User?  @relation(fields: [userId], references: [id])
  recipeId String @db.ObjectId
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  authorId  String   @db.ObjectId
  author    User?    @relation(fields: [authorId], references: [id])
  recipeId  String   @db.ObjectId
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}
