// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         Role     @default(USER)
  status       Status   @default(ACTIVE)
  email        String   @unique
  passwordHash String
  username     String   @unique
  name         String?
  description  String?

  image         Image?
  recipes       Recipe[]
  comments      Comment[]
  recipeRatings RecipeRating[]
}

enum Role {
  ADMIN @map("admin")
  USER  @map("user")

  @@map("_Role")
}

enum Status {
  ACTIVE @map("active")
  BANNED @map("banned")

  @@map("_Status")
}

model Recipe {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int      @default(0)

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String? @db.ObjectId

  image       Image?
  ingredients RecipeIngredient[]
  steps       RecipeStep[]
  comments    Comment[]
  ratings     RecipeRating[]
}

type RecipeIngredient {
  count    String
  name     String
  optional Boolean @default(false)
}

model RecipeStep {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String @db.ObjectId

  image Image?
}

model RecipeRating {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  value Int

  user     User?   @relation(fields: [userId], references: [id])
  userId   String? @db.ObjectId
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String  @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String? @db.ObjectId
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String  @db.ObjectId
}

model Image {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  value Bytes
  mime  String

  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?     @unique @db.ObjectId
  recipe       Recipe?     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String?     @unique @db.ObjectId
  recipeStep   RecipeStep? @relation(fields: [recipeStepId], references: [id], onDelete: Cascade)
  recipeStepId String?     @unique @db.ObjectId
}
